name: "Terraform"

on:
  workflow_dispatch:
  push:
    paths:
      - '**/terraform/**'
    branches:
      - main
  pull_request:

jobs:
  plan:
    env:
      working-directory: terraform
      TF_VAR_ec2_management_source_ip: ${{ secrets.EC2_SRC_IP }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ secrets.AWS_REGION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false # This is recommended so the `terraform show` command outputs valid JSON

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ${{ env.working-directory }}
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.working-directory }}

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch' ||  github.event_name == 'push'
        run: terraform plan -no-color
        continue-on-error: true
        working-directory: ${{ env.working-directory }}

      - name: Terraform show
        id: tf_show
        if: github.event_name == 'pull_request'
        run: terraform show -json tfplan.binary > plan.json
        working-directory: ${{ env.working-directory }}

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stderr }}\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # Install the Infracost CLI, see https://github.com/infracost/actions/tree/master/setup
      # for other inputs such as version, and pricing-api-endpoint (for self-hosted users).
      - name: Setup Infracost
        if: github.event_name == 'pull_request'
        uses: infracost/actions/setup@v1
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}

      # Generate Infracost JSON output, the following docs might be useful:
      # Multi-project/workspaces: https://www.infracost.io/docs/multi_project/config_file
      # Combine Infracost JSON files: https://www.infracost.io/docs/multi_project/report
      - name: Generate Infracost JSON
        if: github.event_name == 'pull_request'
        run: infracost breakdown --path plan.json --format json --out-file /tmp/infracost.json
        working-directory: ${{ env.working-directory }}
        # Env vars can be set using the usual GitHub Actions syntax
        # env:
        #   MY_ENV: ${{ secrets.MY_ENV }}

      # See https://github.com/infracost/actions/tree/master/comment
      # for other inputs such as target-type.
      - name: Post Infracost comment
        if: github.event_name == 'pull_request'
        uses: infracost/actions/comment@v1
        with:
          path: /tmp/infracost.json
          # Choose the commenting behavior, 'update' is a good default:
          behavior: update # Create a single comment and update it. The "quietest" option.                 
          # behavior: delete-and-new # Delete previous comments and create a new one.
          # behavior: hide-and-new # Minimize previous comments and create a new one.
          # behavior: new # Create a new cost estimate comment on every push.
          
      - name: Share artifact inside workflow
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v1
        with:
          name: terraform-artifact
          path: ${{ env.working-directory }}
          
  deploy:
    needs: plan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: dev
    steps:
      - name: Get artifact
        uses: actions/download-artifact@v1
        with:
          name: terraform-artifact
          path: ${{ github.workspace }}/${{ env.working-directory }}
          
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
        run: terraform apply -auto-approve
        working-directory: ${{ env.working-directory }}
